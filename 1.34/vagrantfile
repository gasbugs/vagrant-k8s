IMAGE_NAME = "bento/ubuntu-24.04"
K8S_MINOR_VERSION = "34"
NETWORK_SUB = "192.168.60."
START_IP = 150
POD_CIDR = "10.#{K8S_MINOR_VERSION}.0.0/16"

cluster = {
  "controlplane" => { :cpus => 2, :mem => 2048 },
  "worker" => { :cpus => 2, :mem => 2048 }
}

WORKER_COUNT = 2

VM_GROUP_NAME = "k8s-1.#{K8S_MINOR_VERSION}"
DOCKER_VER = "5:20.10.12~3-0~ubuntu-focal"
KUBE_VER = "1.#{K8S_MINOR_VERSION}.1-00"

Vagrant.configure("2") do |config|
  config.vm.box = IMAGE_NAME

  config.vm.define "controlplane", primary: true do |controlplane|
    controlplane.vm.box = IMAGE_NAME
    controlplane.vm.network "private_network", ip: "#{NETWORK_SUB}#{START_IP}"
    controlplane.vm.hostname = "controlplane"
    controlplane.vm.provision "kube", type: "shell", privileged: true, path: "scripts/kube.sh", env: {
      "docker_ver" => "#{DOCKER_VER}",
      "k8s_ver" => "#{KUBE_VER}"
    }
    controlplane.vm.provision "shell-1", type: "shell", preserve_order: true, privileged: true, inline: <<-SHELL
      OUTPUT_FILE=/vagrant/join.sh
      rm -rf /vagrant/join.sh
      rm -rf /vagrant/.kube
      sudo kubeadm init --apiserver-advertise-address=#{NETWORK_SUB}#{START_IP} --pod-network-cidr=#{POD_CIDR}
      sudo kubeadm token create --print-join-command > /vagrant/join.sh
      chmod +x $OUTPUT_FILE
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      cp -R $HOME/.kube /vagrant/.kube
      kubectl completion bash >/etc/bash_completion.d/kubect
      echo 'alias k=kubectl' >>~/.bashrc

      # calico 명령어 설치
      CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
      CLI_ARCH=amd64
      if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
      curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
      sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
      sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
      rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
 
      # cilium 설치
      cilium install --version 1.17.6 --set devices=eth1
    SHELL

    controlplane.vm.provision "shell-2", type: "shell", privileged: true, inline: <<-SHELL
      sudo sed -i 's#/usr/bin/kubelet#/usr/bin/kubelet --node-ip=#{NETWORK_SUB}#{START_IP}#g' /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
      # sudo echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=#{NETWORK_SUB}#{START_IP}"' >> /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
      sudo systemctl daemon-reload
      sudo systemctl restart kubelet
    SHELL

    controlplane.vm.provision "file", preserve_order: true, source: "files", destination: "/tmp"
    controlplane.vm.provision "3", type: "shell", preserve_order: true, privileged: true, path: "scripts/pv.sh"

    controlplane.vm.provider "virtualbox" do |v|
      v.name = "#{VM_GROUP_NAME}-controlplane"
      v.gui = false
      v.memory = cluster['controlplane'][:mem]
      v.cpus = cluster['controlplane'][:cpus]
      v.customize ["modifyvm", :id, "--groups", "/#{VM_GROUP_NAME}"]
      v.customize ["modifyvm", :id, "--vram", "9"]
    end # end provider
  end

  (1..WORKER_COUNT).each do |i|
    config.vm.define "worker-#{i}" do |worker|
      worker.vm.box = IMAGE_NAME
      worker.vm.network "private_network", ip: "#{NETWORK_SUB}#{i + START_IP}"
      worker.vm.hostname = "worker-#{i}"
      worker.vm.provision "kube", type: "shell", privileged: true, path: "scripts/kube.sh", env: {
        "docker_ver" => "#{DOCKER_VER}",
        "k8s_ver" => "#{KUBE_VER}"
      }
      worker.vm.provision "shell-1", type: "shell", privileged: true, inline: <<-SHELL
        sudo /vagrant/join.sh
        sudo systemctl daemon-reload
        sudo systemctl restart kubelet
      SHELL
      worker.vm.provision "shell-2", type: "shell", privileged: true, inline: <<-SHELL
        sudo sed -i 's#/usr/bin/kubelet#/usr/bin/kubelet --node-ip=#{NETWORK_SUB}#{i + START_IP}#g' /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
        # sudo echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=#{NETWORK_SUB}#{i + START_IP}"' >> /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
        sudo systemctl daemon-reload
        sudo systemctl restart kubelet
      SHELL

      worker.vm.provider "virtualbox" do |v|
        v.name = "#{VM_GROUP_NAME}-worker-#{i}"
        v.gui = false
        v.memory = cluster['worker'][:mem]
        v.cpus = cluster['worker'][:cpus]
        v.customize ["modifyvm", :id, "--groups", "/#{VM_GROUP_NAME}"]
        v.customize ["modifyvm", :id, "--vram", "9"]
      end # end provider
    end
  end
end
